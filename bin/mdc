#!/usr/bin/env bash
set -e

# First find out if this was called from symlink,
# then find the real path of parent directory.
# This is needed because macOS does not have GNU realpath.
thisfile=$( readlink "${BASH_SOURCE[0]}" ) || thisfile="${BASH_SOURCE[0]}"
MDC_BASEDIR="$( cd "$( dirname "$thisfile" )/../" && pwd -P )"
export MDC_BASEDIR="${MDC_BASEDIR}"

# Use mdc-compose-final.yml as much as possible,
# but allow devs to make tweaks in it,
# it is deleted only from bin/mdc-rebuild and bin/mdc-down scripts.
finalconfigfilename="mdc-compose-final.yml"
if [ -f $finalconfigfilename ]; then
    docker compose -f $finalconfigfilename "$@"
    exit 0
fi

# Load all environment settings.
source "${MDC_BASEDIR}/bin/include/env.sh"

# Create config.php if not present yet.
configfile="config.php"
if [ ! -f "$configfile" ] && [ -f 'lib/moodlelib.php' ]; then
    cp "${MDC_BASEDIR}/templates/config.php" config.php
fi

dockercompose="-f ${MDC_BASEDIR}/compose-webserver.yml"
dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-db.yml"
dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-db.${MDC_DB_TYPE}.yml"
dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-exttests.yml"
dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-selenium.yml"
dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-mailpit.yml"

# Allow shared mdc-config file.
configfile="${MDC_BASEDIR}/shared/mdc-config.php"
if [ -f "$configfile" ]; then
    echo "[mdc] Using ${configfile}"
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-webserver.mdc-config-shared.yml"
fi

# Allow extra mdc-config file in non-moodle directories too.
configfile="mdc-config.php"
if [ -f "$configfile" ]; then
    echo "[mdc] Using ${MDC_PROJECTDIR}/${configfile}"
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-webserver.mdc-config-project.yml"
fi

# Special configuration for obsolete MySQL 5.7
if [ "$MDC_DB_TYPE" == "mysqli" ] && [[ "${MDC_DB_VERSION}" == "5.7."* ]]; then
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-db.mysqli.legacy.yml"
fi

# Behat browser debug port for use in "chrome://inspect".
if [ "${MDC_BEHAT_BROWSER_INSPECT_PORT-0}" -gt 1024 ]; then
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-selenium.debug.port.yml"
fi

# External services for additional PHPUnit tests.
if [ ! -z "$MDC_PHPUNIT_EXTERNAL_SERVICES" ]; then
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-phpunit-external-services.yml"
fi

# BBB Mock
if [ ! -z "$MDC_BBB_MOCK" ]; then
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-bbb-mock.yml"
fi

#  Faildump directory.
if [ ! -z "$MDC_BEHAT_FAILDUMP_PATH" ]; then
    if [ ! -d "$MDC_BEHAT_FAILDUMP_PATH" ]; then
        echo 'Error: MDC_BEHAT_FAILDUMP_PATH is not an existing directory'
        exit 1
    fi
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-webserver.behatfaildump.yml"
fi

#  Backups directory.
if [ ! -z "$MDC_BACKUP_PATH" ]; then
    if [ ! -d "$MDC_BACKUP_PATH" ]; then
        echo 'Error: MDC_BACKUP_PATH is not an existing directory'
        exit 1
    fi
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-webserver.backups.yml"
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-db.backups.yml"
fi

#  PHP error logs directory.
if [ ! -z "$MDC_PHP_ERROR_LOG_PATH" ]; then
    if [ ! -f "$MDC_PHP_ERROR_LOG_PATH" ]; then
        touch $MDC_PHP_ERROR_LOG_PATH
    fi
    if [ ! -f "$MDC_PHP_ERROR_LOG_PATH" ]; then
        echo 'Error: MDC_PHP_ERROR_LOG_PATH file cannot be created'
        exit 1
    fi
    dockercompose="${dockercompose} -f ${MDC_BASEDIR}/compose-webserver.phperrorlog.yml"
fi

# Apply user overrides at the very end!

# Apply shared customisations.
sharedfile="${MDC_BASEDIR}/shared/mdc-compose.yml"
if [ -f "${sharedfile}" ]; then
  echo "[mdc] Using ${sharedfile}"
  dockercompose="${dockercompose} -f ${sharedfile}"
fi

# Finally any other custom project overrides.
filename="mdc-compose.yml"
if [ -f $filename ]; then
    echo "[mdc] Using ${MDC_PROJECTDIR}/${filename}"
    dockercompose="${dockercompose} -f ${filename}"
fi

# Create the final config file.
docker compose $dockercompose config > ${finalconfigfilename} || rm ${finalconfigfilename} || false

if [ ! -f ${finalconfigfilename} ]; then
    echo "[mdc] Failed to create combined Docker compose file"
    exit 1
fi

# Use the final combined compose file.
docker compose -f $finalconfigfilename "$@"
